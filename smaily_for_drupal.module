<?php

/**
 * @file
 * Module file for smaily_for_durpal.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Node\Entity\Node;

/**
 * Implements hook_help().
 */
function smaily_for_drupal_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.smaily_for_drupal':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Smaily for Drupal module allows you to integrate the Smaily API for your site. A newsletter subscription block can be configured and placed where possible.');
      $output .= '<br>' . t('More information about Smaily is available at the Smaily <a href=":knowledgebase_url">Knowledgebase.</a>', [':knowledgebase_url' => 'http://help.smaily.com/en/support/home']);
      $output .= '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configuring Smaily API credentials') . '</dt>';
      $output .= '<dd>' . t('Fill out and validate the credentials provided to you by Smaily in the administration page.') . '</dd>';
      $output .= '<dt>' . t('Placing newsletter form') . '</dt>';
      $output .= '<dd>' . t('To place a newsletter subscription form, go to <b>admin/structure/block</b> and place <b>Smaily Newsletter</b> block to your preferred position.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

function smaily_for_drupal_install() {
  // Create default success page.
  $body = [
    'value' => 'Thank you for subscribing.',
    'format' => 'basic_html',
  ];
  $node = Node::create([
    'type' => 'smaily_response_page',
    'title' => 'Success page',
    'body' => $body,
    'uid' => 1,
    'status' => 1,
    'promote' => 0,
    'field_response_page_type' => 1,
  ]);
  $node->enforceIsNew();
  $node->save();

  // Create default failure page.
  $body = [
    'value' => 'Something went wrong subscribing. Try again later.',
    'format' => 'basic_html',
  ];
  $node = Node::create([
    'type' => 'smaily_response_page',
    'title' => 'Failure page',
    'body' => $body,
    'uid' => 1,
    'status' => 1,
    'promote' => 0,
    'field_response_page_type' => 0,
  ]);
  $node->enforceIsNew();
  $node->save();
}

/**
* Implements hook_uninstall().
*/
function smaily_for_drupal_uninstall() {
  // Load services.
  $queryFactory = \Drupal::service('entity.query');
  $nodeStorage  = \Drupal::entityManager()->getStorage('node');

  // Query all entity.
  $query = $queryFactory->get('node')
    ->condition('type', 'smaily_response_page');
  $nids = $query->execute();

  // Delete entities.
  if (!empty($nids)) {
    $entities = $nodeStorage->loadMultiple($nids);
    $nodeStorage->delete($entities);
  }
}

/**
* Implements hook_page_attachments().
*/
function smaily_for_drupal_page_attachments(array &$page) {
  $request = \Drupal::request()->query->all();
  $message = isset($request['message']) ? trim($request['message']) : NULL;
  $code = isset($request['code']) ? (int) trim($request['code']) : NULL;
  if (!$message && !$code) {
    return;
  }
  switch ($code) {
      case 101:
        \Drupal::messenger()->addMessage(t('You have been successfully subscribed.'), 'status');
        break;

      case 201:
        \Drupal::messenger()->addMessage(t('Data must be posted with POST method.'), 'error');
        break;

      case 204:
        \Drupal::messenger()->addMessage(t('Data does not contain a recognizable email address.'), 'warning');
        break;

      case 205:
        \Drupal::messenger()->addMessage(t(
          'Could not add to subscriber list for an unknown reason. Probably something in Smaily.'), 'error');
        break;

      default:
        \Drupal::messenger()->addMessage(t('Something went wrong, try again later.'), 'error');
        break;
  }

}
