<?php

/**
 * @file
 * This is the core required file for Sendsmaily Subscribe.
 */

/**
 * Implements hook_page_build().
 *
 * @todo The block is not 6'th block always.
 */
function sendsmaily_subscribe_page_build(&$page) {
  drupal_add_js('(function($){$().ready(function(){
      //sendsmaily e-mail js validate
      $("#block-block-6 form").prepend(\'<div id="block-block-6-errors"></div>\');
      $("#block-block-6 form").submit(function(e){
        if(!validateEmail($("input[name$=\'email\']").val())){
          e.preventDefault();
          $("#block-block-6-errors").html(Drupal.t("Incorrect email address provided!"));
        }
      });
    });})(jQuery);

    //js validate function
    function validateEmail($email) {  var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/; return emailReg.test( $email );}',
  'inline');
}

/**
 * Implements hook_menu().
 */
function sendsmaily_subscribe_menu() {
  $items = array();

  $items['admin/config/people/sendsmaily'] = array(
    'title' => 'Sendsmaily',
    'description' => 'Sendsmaily integration configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sendsmaily_subscribe_configuration_page', NULL),
    'access arguments' => array('administer sendsmaily'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function sendsmaily_subscribe_permission() {
  return array(
    'administer sendsmaily' => array(
      'title' => t('Administer sendsmaily'),
    ),
  );
}

/**
 * Admin form for setting domain and key.
 */
function sendsmaily_subscribe_configuration_page() {
  $form = array();

  $form['sendsmaily_message'] = [
    '#type' => 'markup',
    '#prefix' => '<div id="sendsmaily-wrapper">',
    '#suffix' => '</div>',
    '#markup' => '<h1>' . t('Authentication') . '</h1>',
  ];

  $form['sendsmaily_api_credentials'] = [
    '#type' => 'fieldset',
    '#title' => t('API credentials'),
  ];

  $form['sendsmaily_api_credentials']['sendsmaily_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#default_value' => variable_get('sendsmaily_domain', ''),
    '#attributes' => [
      'placeholder' => t('For example "demo" from https://demo.sendsmaily.net/'),
    ],
    '#required' => TRUE,
  );

  $form['sendsmaily_api_credentials']['sendsmaily_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('sendsmaily_username', ''),
    '#required' => TRUE,
  );

  $form['sendsmaily_api_credentials']['sendsmaily_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('sendsmaily_password', ''),
    '#required' => TRUE,
  );

  $form['sendsmaily_api_credentials']['button_validate_credentials'] = [
    '#type' => 'button',
    '#value' => t('Validate credentials'),
    '#ajax' => [
      'event' => 'click',
      'callback' => 'ajax_sendsmaily_validation_callback',
      'wrapper' => 'sendsmaily-wrapper',
    ],
  ];

  $form['sendsmaily_autoresponder'] = array (
    '#type' => 'select',
    '#title' => t('Autoresponder'),
    '#default_value' => variable_get('sendsmaily_autoresponder', ''),
    '#options' => fetchAutoresponders(),
    '#empty_option' => t('Select autoresponder'),
  );

  $form['sendsmaily_button_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Subscribe button title'),
    '#default_value' => variable_get('sendsmaily_button_title', 'Subscribe to newsletter'),
    '#required' => TRUE,
  );

  $form['sendsmaily_success_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Success URL'),
    '#default_value' => variable_get('sendsmaily_success_url', ''),
    '#description' => t('For example: http://example.com Leave blank for redirect back'),
  );

  $form['sendsmaily_failure_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Failure URL'),
    '#default_value' => variable_get('sendsmaily_failure_url', ''),
    '#description' => t('For example: http://example.com Leave blank for redirect back'),
  );

  $form['sendsmaily_options'] = array(
    '#title' => t('Subscription options'),
    '#type' => 'textarea',
    '#description' => t('List of key-value pairs on separated rows, that will be displayed on the registration form as checkboxes. ie. subscription1|Main news'),
    '#default_value' => variable_get('sendsmaily_options', ''),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_block_info().
 */
function sendsmaily_subscribe_block_info() {
  $blocks = array();

  $blocks['sendsmaily'] = array(
    'info' => t('Sendsmaily'),
  );

  return $blocks;
}

/**
 * Implements hook_form().
 */
function sendsmaily_subscribe_form($form, &$form_state) {
  $form['#action'] = 'https://' . variable_get('sendsmaily_domain', '') . '.sendsmaily.net/api/opt-in/';

  $form['name'] = array(
    '#title' => t('Name:'),
    '#type' => 'textfield',
    '#size' => FALSE,
    '#attributes' => array('placeholder' => t('Name')),
  );

  $form['email'] = array(
    '#title' => t('Email:'),
    '#type' => 'textfield',
    '#size' => FALSE,
    '#required' => TRUE,
    '#attributes' => array('placeholder' => t('Email')),
  );

  $form['autoresponder'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('sendsmaily_autoresponder', ''),
  );

  $current_url = url(current_path(), array('absolute' => TRUE));
  $form['success_url'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('sendsmaily_success_url') ?: $current_url,
  );

  $form['failure_url'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('sendsmaily_failure_url') ?: $current_url,
  );

  if (variable_get('sendsmaily_options', '')) {
    $options = array();
    foreach (explode("\n", variable_get('sendsmaily_options', '')) as $line) {
      $values = explode("|", $line);
      $options[trim($values[0])] = trim($values[1]);
    }
    foreach ($options as $field => $label) {
      $form['category_' . $field] = array(
        '#type' => 'checkbox',
        '#title' => $label,
      );
    }
  }

  $form['join'] = [
    // #name 'op' is recognized as a custom field by Smaily, leaving it blank here.
    '#name' => '',
    '#type' => 'submit',
    '#value' => t(variable_get('sendsmaily_button_title', 'Subscribe to newsletter')),
    '#default_value' => t('Subscribe to newsletter'),
  ];

  // Remove hidden form elements to not send them to Smaily as a field.
  $form['#pre_render'][] = 'removeHiddenDrupalInputs';
  return $form;
}

/**
 * Remove form_id and form_build_id as to not send them to Smaily as fields.
 *
 * @param array $form
 *   Form before it is rendered for display.
 *
 * @return array
 *   Form without form_id and form_build_id hidden elements.
 */
function removeHiddenDrupalInputs(array $form) {
  unset($form['form_build_id']);
  unset($form['form_id']);
  return $form;
}

/**
 * Implements hook_block_view().
 */
function sendsmaily_subscribe_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'sendsmaily':
      $sendsmaily_domain = variable_get('sendsmaily_domain', '');
      $sendsmaily_key = variable_get('sendsmaily_key', '');

      $block['subject'] = t('Subscribe to our newsletter');
      if (strlen($sendsmaily_domain) && $sendsmaily_key) {
        $block['content'] = drupal_get_form('sendsmaily_subscribe_form');
      }
      else {
        $block['content'] = t("No domain or key found. Please !configure Sendsmaily Subscribe!", array('!configure' => l(t('configure'), 'admin/config/people/sendsmaily')));
      }

      break;
  }

  return $block;
}

/**
   * Ask for a list of autoresponders from Smaily.
   *
   * @return array
   *   Array of autoresponders with an id and title for Form select.
   */
function fetchAutoresponders() {
  $username = variable_get('sendsmaily_username', '');
  $password = variable_get('sendsmaily_password', '');
  $domain = variable_get('sendsmaily_domain', '');

  $autoresponder_list = [];
  if (empty($domain) && empty($username) && empty($password)) {
    return $autoresponder_list;
  }
  $full_url = 'https://' . $domain . '.sendsmaily.net/api/workflows.php?trigger_type=form_submitted';
  try {
    $response = drupal_http_request($full_url, array(
      'headers' => array("Authorization: Basic " => base64_encode($username . ':' . $password)),
      'data' => array(),
      'method' => 'GET',
      'timeout' => 10,
    ));
    if (!isset($response->data)) {
      return $autoresponder_list;
    }
    $autoresponders = json_decode($response->data, TRUE);
    if (empty($autoresponders)) {
      return $autoresponder_list;
    }
    foreach ($autoresponders as $autoresponder) {
      if (!empty($autoresponder['id']) && !empty($autoresponder['title'])) {
        $autoresponder_list[$autoresponder['id']] = trim($autoresponder['title']);
      }
    }
  }

  catch (\Exception $e) {
    $logger_placeholders = [
      '@username' => $username,
      '@subdomain' => $domain,
      '@statuscode' => $e->getResponse()->getStatusCode(),
    ];
    watchdog(
      'sendsmaily',
      'HTTP status code: @statuscode Failed trying to fetch autoresponders from Smaily with subdomain: @subdomain and username: @username',
      $logger_placeholders,
      WATCHDOG_NOTICE,
    );
  }

  return $autoresponder_list;
}

/**
 * {@inheritdoc}
 */
function ajax_sendsmaily_validation_callback(&$form, $form_state) {
  $username = trim($form_state['values']['sendsmaily_username']);
  $password = trim($form_state['values']['sendsmaily_password']);
  $domain = trim($form_state['values']['sendsmaily_domain']);
  $message = $form['sendsmaily_message'];

  // In case some people use http://demo.sendsmaily.net
  $domain = normalizeSubdomain($domain);
  // Drupal's validation is not done with Ajax.
  if (empty($username) || empty($password) || empty($domain)) {
    $message['#markup'] .= '<p>' . 'Authentication status: Credentials missing' . '</p>';
    return $message;
  }
  $full_url = 'https://' . $domain . '.sendsmaily.net/api/workflows.php?trigger_type=form_submitted';
  // Try to authenticate with given credentials
  try {
    $response = drupal_http_request($full_url, array(
      'headers' => array("Authorization: Basic " => base64_encode($username . ':' . $password)),
      'data' => array(),
      'method' => 'GET',
      'timeout' => 1,
    ));
    if (isset($response->code) && $response->code == 200) {
      $message['#markup'] .= '<p>' . 'Authentication status: Credentials valid' . '</p>';
      return $message;
    }
  }
  catch (\Exception $e) {
    $logger_placeholders = [
      '@username' => $username,
      '@subdomain' => $domain,
      '@statuscode' => $e->getResponse()->getStatusCode(),
    ];
    watchdog(
      'sendsmaily',
      'HTTP status code: @statuscode Failed trying to validate credentials to Smaily from Smaily with subdomain: @subdomain and username: @username',
      $logger_placeholders,
      WATCHDOG_NOTICE,
    );
  }
  $message['#markup'] .= '<p>' . 'Authentication status: Credentials invalid' . '</p>';
  return $message;
}

/**
 * Normalize subdomain into the bare necessity.
 *
 * @param string $subdomain
 *   Messy subdomain, http://demo.sendsmaily.net for example.
 *
 * @return string
 *   demo from demo.sendsmaily.net
 */
function normalizeSubdomain($subdomain) {
  // First, try to parse as full URL.
  // If that fails, try to parse as subdomain.sendsmaily.net.
  // Last resort clean up subdomain and pass as is.
  if (filter_var($subdomain, FILTER_VALIDATE_URL)) {
    $url = parse_url($subdomain);
    $parts = explode('.', $url['host']);
    $subdomain = count($parts) >= 3 ? $parts[0] : '';
  }
  elseif (preg_match('/^[^\.]+\.sendsmaily\.net$/', $subdomain)) {
    $parts = explode('.', $subdomain);
    $subdomain = $parts[0];
  }
  $subdomain = preg_replace('/[^a-zA-Z0-9]+/', '', $subdomain);
  return $subdomain;
}
